# .github/workflows/build.yml
name: Build and Test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      build_flavor:
        description: 'Build flavor'
        required: true
        default: 'non_prod'
        type: choice
        options:
        - non_prod
        - prod
      services:
        description: 'Services to build (comma-separated)'
        required: true
        default: 'bidding_service,buyer_frontend_service'
        type: string
      push_to_acr:
        description: 'Push images to Azure Container Registry'
        required: true
        default: true
        type: boolean

env:
  BUILD_TYPE: Release
  REGISTRY: ispirt.azurecr.io
  
jobs:
  build:
    runs-on: self-hosted
    
    steps:
    - name: Display Manual Trigger Parameters
      run: |
        echo "üöÄ Manual Build Triggered on Self-Hosted Runner"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Build Flavor: ${{ github.event.inputs.build_flavor }}"
        echo "Services: ${{ github.event.inputs.services }}"
        echo "Push to ACR: ${{ github.event.inputs.push_to_acr }}"

    - name: Fix permissions
      run: |
        chown -R $USER:$USER .
        chmod -R u+rwX .

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ispirt/ad-selection-api.bidding-and-auction-servers
        ref: main
        fetch-depth: 0
        
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git

    - name: Setup Dependencies  
      run: |
        # Remove any conflicting Docker packages
        sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
        sudo apt-get autoremove -y
        
        # Install build dependencies
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release \
          libssl-dev \
          libcurl4-openssl-dev \
          libprotobuf-dev \
          protobuf-compiler \
          pkg-config

    - name: Install Docker
      run: |
        # Free up memory first
        sudo apt-get clean
        sudo apt-get autoclean
        sudo rm -rf /var/lib/apt/lists/*
        
        # Download and run Docker installation script
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        
        # Clean up installation script
        rm get-docker.sh
        
        # Add user to docker group
        sudo usermod -aG docker $USER
        
        # Install Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
        # Verify installation
        docker --version
        docker-compose --version

    - name: Setup Docker
      run: |
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER

    - name: Make Build Script Executable
      run: |
        chmod +x ./production/packaging/build_and_test_all_in_docker
        
    - name: Parse Service Paths
      id: parse_services
      run: |
        # Convert comma-separated services to --service-path arguments
        services="${{ github.event.inputs.services }}"
        service_args=""
        IFS=',' read -ra SERVICE_ARRAY <<< "$services"
        for service in "${SERVICE_ARRAY[@]}"; do
          service_args="$service_args --service-path ${service// /}"
        done
        echo "service_args=$service_args" >> $GITHUB_OUTPUT
        echo "Parsed service arguments: $service_args"
        
    - name: Run Custom Build Command
      run: |
        ./production/packaging/build_and_test_all_in_docker \
          ${{ steps.parse_services.outputs.service_args }} \
          --no-precommit \
          --no-tests \
          --build-flavor ${{ github.event.inputs.build_flavor }} \
          --platform azure \
          --instance local
          
    - name: List Generated Tar Files
      run: |
        echo "Contents of dist/azure directory:"
        ls -la dist/azure/ || echo "dist/azure directory not found"
        find dist/azure/ -name "*.tar" -type f | head -10

  docker-push-to-acr:
    needs: build
    runs-on: self-hosted
    if: ${{ github.event.inputs.push_to_acr == 'true' }}
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
        
    - name: Load and Push Bidding Service Image
      if: contains(github.event.inputs.services, 'bidding_service')
      run: |
        # Load the bidding service image from tar file
        if [ -f "./dist/azure/bidding_service_image.tar" ]; then
          echo "Loading bidding_service_image.tar..."
          docker load -i ./dist/azure/bidding_service_image.tar
          
          # Get the loaded image name
          LOADED_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v "REPOSITORY" | head -n 1 | tr -d '[:space:]')
          echo "Loaded image: $LOADED_IMAGE"
          
          # Tag the image for Azure Container Registry with environment
          docker tag $LOADED_IMAGE ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-${{ github.sha }}
          docker tag $LOADED_IMAGE ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-latest
          
          # Push to Azure Container Registry
          echo "Pushing bidding service to ACR..."
          docker push ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-latest
          
          echo "‚úÖ Successfully pushed bidding service image"
        else
          echo "‚ùå bidding_service_image.tar not found"
          exit 1
        fi
        
    - name: Load and Push Buyer Frontend Service Image
      if: contains(github.event.inputs.services, 'buyer_frontend_service')
      run: |
        # Load the buyer frontend service image from tar file
        if [ -f "./dist/azure/buyer_frontend_service_image.tar" ]; then
          echo "Loading buyer_frontend_service_image.tar..."
          docker load -i ./dist/azure/buyer_frontend_service_image.tar
          
          # Get the loaded image name (skip the first one which is bidding service)
          LOADED_IMAGE=$(docker images --format "table {{.Repository}}:{{.Step}}" | grep -v "REPOSITORY" | grep -v "${{ env.REGISTRY }}/bidding-service" | head -n 1 | tr -d '[:space:]')
          echo "Loaded image: $LOADED_IMAGE"
          
          # Tag the image for Azure Container Registry with environment
          docker tag $LOADED_IMAGE ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-${{ github.sha }}
          docker tag $LOADED_IMAGE ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-latest
          
          # Push to Azure Container Registry
          echo "Pushing buyer frontend service to ACR..."
          docker push ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-latest
          
          echo "‚úÖ Successfully pushed buyer frontend service image"
        else
          echo "‚ùå buyer_frontend_service_image.tar not found"
          exit 1
        fi
        
    - name: Azure Container Registry Scan
      uses: Azure/container-scan@v0
      with:
        image-name: ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-${{ github.sha }}
        username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
      continue-on-error: true
        
    - name: Clean up local images
      run: |
        # Clean up local images to save space
        docker system prune -f
        
    - name: Output Image Information
      run: |
        echo "üöÄ Successfully pushed Docker images to Azure Container Registry:"
        echo "üì¶ Registry: ${{ env.REGISTRY }}"
        echo "üåç Environment: ${{ github.event.inputs.environment }}"
        echo ""
        if [[ "${{ github.event.inputs.services }}" == *"bidding_service"* ]]; then
          echo "üîπ Bidding Service:"
          echo "   - ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-${{ github.sha }}"
          echo "   - ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-latest"
        fi
        echo ""
        if [[ "${{ github.event.inputs.services }}" == *"buyer_frontend_service"* ]]; then
          echo "üîπ Buyer Frontend Service:"
          echo "   - ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-${{ github.sha }}"
          echo "   - ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-latest"
        fi
        echo ""
        echo "üìù To pull these images:"
        if [[ "${{ github.event.inputs.services }}" == *"bidding_service"* ]]; then
          echo "   docker pull ${{ env.REGISTRY }}/bidding-service:${{ github.event.inputs.environment }}-latest"
        fi
        if [[ "${{ github.event.inputs.services }}" == *"buyer_frontend_service"* ]]; then
          echo "   docker pull ${{ env.REGISTRY }}/buyer-frontend-service:${{ github.event.inputs.environment }}-latest"
        fi