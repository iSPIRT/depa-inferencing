# Workflow for the OSSF Scorecards Action
# https://github.com/ossf/scorecard-action#installation

name: Scorecard supply-chain security
# on:
#   # For Branch-Protection check. Only the default branch is supported. See
#   # https://github.com/ossf/scorecard/blob/main/docs/checks.md#branch-protection
#   branch_protection_rule:
#   # To guarantee Maintained check is occasionally updated. See
#   # https://github.com/ossf/scorecard/blob/main/docs/checks.md#maintained
#   schedule:
#     - cron: '15 11 * * 4'
#   push:
#     branches: [ "main" ]
on:
  # Manual trigger only from any branch/environment
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run scorecard on'
        required: false
        default: 'main'
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

# Declare default permissions as read only.
permissions: read-all

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    # `publish_results: true` only works when run from the default branch. conditional can be removed if disabled.
    if: github.event.repository.default_branch == github.ref_name || github.event_name == 'pull_request'
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to publish results and get a badge (see publish_results below).
      id-token: write
      # Uncomment the permissions below if installing in a private repository.
      # contents: read
      # actions: read

    steps:
      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Run analysis"
        uses: ossf/scorecard-action@f49aabe0b5af0936a0987cfb85d86b75731b0186 # v2.4.1
        with:
          results_file: results.sarif
          results_format: sarif
          # (Optional) "write" PAT token. Uncomment the `repo_token` line below if:
          # - you want to enable the Branch-Protection check on a *public* repository, or
          # - you are installing Scorecard on a *private* repository
          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action?tab=readme-ov-file#authentication-with-fine-grained-pat-optional.
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}

          # Public repositories:
          #   - Publish results to OpenSSF REST API for easy access by consumers
          #   - Allows the repository to include the Scorecard badge.
          #   - See https://github.com/ossf/scorecard-action#publishing-results.
          # For private repositories:
          #   - `publish_results` will always be set to `false`, regardless
          #     of the value entered here.
          publish_results: true

          # (Optional) Uncomment file_mode if you have a .gitattributes with files marked export-ignore
          # file_mode: git

      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF
      # format to the repository Actions tab.
      - name: "Upload artifact"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      # Upload the results to GitHub's code scanning dashboard (optional).
      # Commenting out will disable upload of results to your repo's Code Scanning dashboard
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Prepare SARIFs for DefectDojo
        if: always()
        run: |
          mkdir -p reports
          cp results.sarif reports/scorecard.sarif

      - name: Upload SARIFs to DefectDojo
        if: always()
        env:
          DD_URL: ${{ secrets.DEFECTDOJO_URL }}
          DD_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DD_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          pip install requests
          python3 <<'EOF'
          import os, requests
          dojo_url = os.getenv("DD_URL").rstrip("/")
          api_key = os.getenv("DD_API_KEY")
          engagement_id = os.getenv("DD_ENGAGEMENT_ID")
          headers = {"Authorization": f"Token {api_key}"}
          with open("reports/scorecard.sarif", "rb") as f:
              data = {"scan_type": "SARIF", "engagement": engagement_id, "auto_create_context": True}
              r = requests.post(f"{dojo_url}/api/v2/import-scan/", headers=headers, data=data, files={"file": f})
              print(r.status_code, r.text)
          EOF
