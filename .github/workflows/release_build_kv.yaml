# .github/workflows/build.yml
name: Build and Test for Key-Value Service

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      build_flavor:
        description: 'Build flavor'
        required: true
        default: 'nonprod'
        type: choice
        options:
        - nonprod
        - prod
      services:
        description: 'Services to build (comma-separated)'
        required: true
        default: 'key_value_service'
        type: string
      release_tag:
        description: 'Release version for Docker images (e.g., 1.0.0.0)'
        required: true
        default: '1.0.0.0'
        type: string
      push_to_acr:
        description: 'Push images to Azure Container Registry'
        required: true
        default: true
        type: boolean

env:
  BUILD_TYPE: Release
  REGISTRY: ispirt.azurecr.io
  
jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 1440 # 24 hours
    steps:
    - name: Display Manual Trigger Parameters
      run: |
        echo "üöÄ Manual Build Triggered on Self-Hosted Runner"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Build Flavor: ${{ github.event.inputs.build_flavor }}"
        echo "Services: ${{ github.event.inputs.services }}"
        echo "Release Version: ${{ github.event.inputs.release_tag }}"
        echo "Push to ACR: ${{ github.event.inputs.push_to_acr }}"

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ispirt/protected-auction-key-value-service
        ref: main
        fetch-depth: 0
        
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git

    - name: Setup Dependencies  
      run: |
        # Remove any conflicting Docker packages
        sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
        sudo apt-get autoremove -y
        
        # Install build dependencies
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release \
          libssl-dev \
          libcurl4-openssl-dev \
          libprotobuf-dev \
          protobuf-compiler \
          pkg-config

    - name: Install Docker
      run: |
        # Free up memory first
        sudo apt-get clean
        sudo apt-get autoclean
        sudo rm -rf /var/lib/apt/lists/*
        
        # Download and run Docker installation script
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        
        # Clean up installation script
        rm get-docker.sh
        
        # Add user to docker group
        sudo usermod -aG docker $USER        
        
        # Verify installation
        docker --version

    - name: Setup Docker
      run: |
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER

    - name: Make Build Script Executable
      run: |
        chmod +x ./production/packaging/build_and_test_all_in_docker
        
    - name: Parse Service Paths
      id: parse_services
      run: |
        # Convert comma-separated services to --service-path arguments
        services="${{ github.event.inputs.services }}"
        service_args=""
        IFS=',' read -ra SERVICE_ARRAY <<< "$services"
        for service in "${SERVICE_ARRAY[@]}"; do
          service_args="$service_args --service-path ${service// /}"
        done
        echo "service_args=$service_args" >> $GITHUB_OUTPUT
        echo "Parsed service arguments: $service_args"
        
    - name: Run Custom Build Command
      run: |
        ./production/packaging/build_and_test_all_in_docker \
        --instance azure_microsoft \
        --platform azure_microsoft \
        --mode ${{ github.event.inputs.build_flavor }}
          
    - name: List Generated Tar Files
      run: |
        echo "Contents of dist/azure directory:"
        ls -la dist/azure/ || echo "dist/azure directory not found"
        find dist/azure/ -name "*.tar" -type f | head -10

    - name: Cleanup build artifacts (Build Job)
      if: always()  
      run: |
        echo "üßπ Cleaning up build artifacts from build job..."
        
        # Clean up Docker artifacts
        echo "Cleaning Docker containers and images..."
        docker container prune -f || true
        docker image prune -f || true
        
        # Clean up temporary files and caches
        echo "Cleaning up temporary files..."
        sudo rm -rf /tmp/docker-* || true
        sudo rm -rf /tmp/buildkit-* || true
            
        # Show disk space after cleanup
        echo "üìä Disk space after cleanup:"
        df -h
        
        echo "‚úÖ Build job cleanup completed"

  docker-push-to-acr:
    needs: build
    runs-on: self-hosted
    if: ${{ github.event.inputs.push_to_acr == 'true' }}
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

    - name: Generate Service-Specific Docker Tags
      id: generate_tags
      run: |
        BUILD_FLAVOR="${{ github.event.inputs.build_flavor }}"
        RELEASE_VERSION="${{ github.event.inputs.release_tag }}"

        # Generate service-specific tags
        KV_SERVICE_IMAGE="key-value-service:${BUILD_FLAVOR}-${RELEASE_VERSION}"

        echo "key_value_service=$KV_SERVICE_IMAGE" >> $GITHUB_OUTPUT

        echo "‚úÖ Service-specific Docker tags generated:"
        echo "  Key Value Service: $KV_SERVICE_IMAGE"

    - name: Load and Push Key Value Service Image
      if: contains(github.event.inputs.services, 'key_value_service')
      run: |
        # Load the key value service image from tar file
        if [ -f "./dist/azure/key_value_service_image.tar" ]; then
          echo "Loading key_value_service_image.tar..."
          LOAD_OUTPUT=$(docker load -i ./dist/key_value_service_image.tar)

          # Get the loaded image name
          LOADED_IMAGE=$(echo "$LOAD_OUTPUT" | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded image: $LOADED_IMAGE"
          
          # Tag the image with service-specific naming following Azure best practices
          SERVICE_REPO_NAME="azure/depa-inferencing"

          # Service-specific tag: key-value-service:non-prod:1.0.0.0
          docker tag $LOADED_IMAGE ${{ env.REGISTRY }}/$SERVICE_REPO_NAME/${{ steps.generate_tags.outputs.key_value_service}}
            
          # Push all tags to Azure Container Registry
          echo "Pushing key value service to ACR with service-specific tags..."
          docker push ${{ env.REGISTRY }}/$SERVICE_REPO_NAME/${{ steps.generate_tags.outputs.key_value_service_image }}

          echo "‚úÖ Successfully pushed key value service image with tags:"
          echo "  - ${{ env.REGISTRY }}/$SERVICE_REPO_NAME/${{ steps.generate_tags.outputs.key_value_service }}"
        else
          echo "‚ùå key_value_service_image.tar not found"
          exit 1
        fi

    - name: Cleanup build artifacts (Docker Push Job)
      if: always()
      run: |
        echo "üßπ Cleaning up build artifacts from docker push job..."
        docker container prune -f || true
        docker image prune -f || true
        sudo chown -R $(whoami):$(whoami) ${GITHUB_WORKSPACE} || true
        echo "‚úÖ Docker push job cleanup completed"

